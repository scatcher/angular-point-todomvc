{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["/// <reference path='_all.ts' />\n/**\n * The main TodoMVC app module.\n *\n * @type {angular.Module}\n */\nvar todos;\n(function (todos) {\n    'use strict';\n    var dependencies = ['angularPoint'];\n    var offline = false;\n    if (window.location.href.indexOf('localhost') > -1 ||\n        window.location.href.indexOf('http://0.') > -1 ||\n        window.location.href.indexOf('http://10.') > -1 ||\n        window.location.href.indexOf('http://127.') > -1 ||\n        window.location.href.indexOf('http://192.') > -1 ||\n        window.location.href.indexOf('github.io') > -1) {\n        offline = true;\n        /** Add in mock library if working offline to prevent us from making outside requests */\n        dependencies.push('ngMockE2E');\n    }\n    angular.module('todomvc', dependencies)\n        .config(config);\n    function config(apConfig) {\n        //TODO: Update with the site URL where most of your lists reside\n        apConfig.defaultUrl = '//MY_SERVER.COM/MY_SITE';\n    }\n    if (offline) {\n        angular.module('todomvc', dependencies)\n            .run(function ($httpBackend) {\n            // Don't mock the html views\n            $httpBackend.whenGET(/\\.html$/).passThrough();\n        });\n    }\n})(todos || (todos = {}));\n\n/// <reference path='../_all.ts' />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar todos;\n(function (todos) {\n    'use strict';\n    var TodoItem = (function (_super) {\n        __extends(TodoItem, _super);\n        function TodoItem(obj) {\n            _super.call(this);\n            _.assign(this, obj);\n        }\n        return TodoItem;\n    })(ap.ListItem);\n    todos.TodoItem = TodoItem;\n    var TodosModel = (function (_super) {\n        __extends(TodosModel, _super);\n        function TodosModel() {\n            /********************* Model Definition ***************************************/\n            /**\n             * @ngdoc object\n             * @name TodosModel\n             * @description\n             *  Model Constructor\n             */\n            _super.call(this, {\n                factory: TodoItem,\n                list: {\n                    /**Maps to the offline XML file in dev folder (no spaces) */\n                    title: 'Todo',\n                    //TODO: You need to set the list GUID below\n                    /**List GUID can be found in list properties in SharePoint designer */\n                    guid: '{C2477C93-BF7D-4CCE-8700-9399C90CD851}',\n                    customFields: [\n                        /** Array of objects mapping each SharePoint field to a property on a list item object */\n                        { staticName: 'Title', objectType: 'Text', mappedName: 'title' },\n                        { staticName: 'Completed', objectType: 'Boolean', mappedName: 'completed' }\n                    ]\n                }\n            });\n            var model = this;\n            /*********************************** Queries ***************************************/\n            /** Fetch data (pulls local xml if offline named model.list.title + '.xml')\n             *  Initially pulls all requested data.  Each subsequent call just pulls records that have been changed,\n             *  updates the model, and returns a reference to the updated data array\n             */\n            model.registerQuery({ name: 'primary' });\n        }\n        return TodosModel;\n    })(ap.Model);\n    todos.TodosModel = TodosModel;\n    angular\n        .module('todomvc')\n        .service('todosModel', TodosModel);\n})(todos || (todos = {}));\n\n/// <reference path='../_all.ts' />\nvar todos;\n(function (todos_1) {\n    'use strict';\n    /**\n     * The main controller for the app. The controller:\n     * - retrieves and persists the model via the todoStorage service\n     * - exposes the model to the template and provides event handlers\n     */\n    var TodoController = (function () {\n        // dependencies are injected via AngularJS $injector\n        // controller's name is registered in Application.ts and specified from ng-controller attribute in index.html\n        function TodoController(todosModel, $scope, $location, filterFilter, $q) {\n            this.todosModel = todosModel;\n            this.$scope = $scope;\n            this.$location = $location;\n            this.filterFilter = filterFilter;\n            this.$q = $q;\n            this.newTodo = '';\n            this.todos = [];\n            //Using controllerAs, vm represents view model\n            var vm = this;\n            vm.refreshTodos();\n            // watching for events/changes in scope, which are caused by view/user input\n            // if you subscribe to scope or event with lifetime longer than this controller, make sure you unsubscribe.\n            //$scope.$watch('todos', () => vm.updateStats(), true);\n            $scope.$watch('vm.$location.path()', function (path) {\n                switch (path) {\n                    case '/active':\n                        vm.statusFilter = { completed: false };\n                        break;\n                    case '/completed':\n                        vm.statusFilter = { completed: true };\n                        break;\n                    default:\n                        vm.statusFilter = undefined;\n                }\n            });\n            if ($location.path() === '') {\n                $location.path('/');\n            }\n        }\n        TodoController.prototype.addTodo = function () {\n            var _this = this;\n            var newTodoTitle = this.newTodo.trim();\n            if (!newTodoTitle.length) {\n                return;\n            }\n            var newTodo = this.todosModel.createEmptyItem({\n                title: newTodoTitle,\n                completed: false\n            });\n            newTodo.saveChanges()\n                .then(function (savedTodo) {\n                //Todo saved\n                _this.refreshTodos();\n            })\n                .catch(function (err) {\n                throw new Error(err);\n            });\n            this.newTodo = '';\n        };\n        TodoController.prototype.editTodo = function (todoItem) {\n            this.editedTodo = todoItem;\n        };\n        TodoController.prototype.doneEditing = function (todoItem) {\n            var _this = this;\n            this.editedTodo = null;\n            todoItem.title = todoItem.title.trim();\n            if (!todoItem.title) {\n                this.removeTodo(todoItem);\n            }\n            else {\n                todoItem.saveChanges()\n                    .then(function (updatedTodo) {\n                    _this.refreshTodos();\n                });\n            }\n        };\n        /**\n         * Initially pulls all todos, each subsequent call only gets the changes that occured since\n         * the previous request\n         */\n        TodoController.prototype.refreshTodos = function () {\n            var _this = this;\n            this.todosModel.executeQuery('primary')\n                .then(function (todos) {\n                _this.todoCache = todos;\n                _this.todos = todos.toArray();\n                _this.remainingCount = _this.filterFilter(_this.todos, { completed: false }).length;\n                _this.doneCount = _this.todos.length - _this.remainingCount;\n                _this.allChecked = !_this.remainingCount;\n            });\n        };\n        TodoController.prototype.removeTodo = function (todoItem) {\n            var _this = this;\n            todoItem.deleteItem()\n                .then(function () {\n                //No need to refresh because successful deletion of a list item automatically\n                //prunes all local caches\n                _this.todos = _this.todoCache.toArray();\n            })\n                .catch(function (err) {\n                //Something bad happened\n                throw new Error(err);\n            });\n        };\n        TodoController.prototype.clearDoneTodos = function () {\n            var _this = this;\n            //Collection all promises so we can wait until all actions are complete before refreshing\n            var promises = [];\n            for (var _i = 0, _a = this.todos; _i < _a.length; _i++) {\n                var todoItem = _a[_i];\n                if (todoItem.completed) {\n                    promises.push(todoItem.deleteItem());\n                }\n            }\n            this.$q.all(promises)\n                .then(function () {\n                //All updates complete\n                _this.todos = _this.todoCache.toArray();\n            });\n        };\n        TodoController.prototype.markAll = function () {\n            var _this = this;\n            //Collection all promises so we can wait until all actions are complete before refreshing\n            var promises = [];\n            for (var _i = 0, _a = this.todos; _i < _a.length; _i++) {\n                var todoItem = _a[_i];\n                //Only save todos that aren't already set\n                if (todoItem.completed !== this.allChecked) {\n                    todoItem.completed = this.allChecked;\n                    promises.push(todoItem.saveChanges());\n                }\n            }\n            this.$q.all(promises)\n                .then(function () {\n                //All updates complete\n                _this.refreshTodos();\n            });\n            this.allChecked = !this.allChecked;\n        };\n        // $inject annotation.\n        // It provides $injector with information about dependencies to be injected into constructor\n        // it is better to have it close to the constructor, because the parameters must match in count and type.\n        // See http://docs.angularjs.org/guide/di\n        TodoController.$inject = [\n            'todosModel',\n            '$scope',\n            '$location',\n            'filterFilter',\n            '$q'\n        ];\n        return TodoController;\n    })();\n    todos_1.TodoController = TodoController;\n    angular\n        .module('todomvc')\n        .controller('todoController', TodoController);\n})(todos || (todos = {}));\n\n/// <reference path='../_all.ts' />\nvar todos;\n(function (todos) {\n    'use strict';\n    /**\n     * Directive that executes an expression when the element it is applied to loses focus.\n     */\n    function TodoBlur() {\n        return {\n            link: function ($scope, element, attributes) {\n                element.bind('blur', function () { $scope.$apply(attributes.todoBlur); });\n                $scope.$on('$destroy', function () { element.unbind('blur'); });\n            }\n        };\n    }\n    todos.TodoBlur = TodoBlur;\n    angular\n        .module('todomvc')\n        .directive('todoBlur', TodoBlur);\n})(todos || (todos = {}));\n\n/// <reference path='../_all.ts' />\nvar todos;\n(function (todos) {\n    'use strict';\n    /**\n     * Directive that places focus on the element it is applied to when the expression it binds to evaluates to true.\n     */\n    function TodoFocus($timeout) {\n        return {\n            link: function ($scope, element, attributes) {\n                $scope.$watch(attributes.todoFocus, function (newval) {\n                    if (newval) {\n                        $timeout(function () { return element[0].focus(); }, 0, false);\n                    }\n                });\n            }\n        };\n    }\n    todos.TodoFocus = TodoFocus;\n    TodoFocus.$inject = ['$timeout'];\n    angular\n        .module('todomvc')\n        .directive('todoFocus', TodoFocus);\n})(todos || (todos = {}));\n"],"file":"app.js","sourceRoot":"/source/"}